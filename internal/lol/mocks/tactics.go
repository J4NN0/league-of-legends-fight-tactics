// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	lol "github.com/J4NN0/league-of-legends-fight-tactics/internal/lol"
	mock "github.com/stretchr/testify/mock"
)

// Tactics is an autogenerated mock type for the Tactics type
type Tactics struct {
	mock.Mock
}

// Fight provides a mock function with given fields: champion1, champion2
func (_m *Tactics) Fight(champion1 lol.Champion, champion2 lol.Champion) lol.TacticsSol {
	ret := _m.Called(champion1, champion2)

	var r0 lol.TacticsSol
	if rf, ok := ret.Get(0).(func(lol.Champion, lol.Champion) lol.TacticsSol); ok {
		r0 = rf(champion1, champion2)
	} else {
		r0 = ret.Get(0).(lol.TacticsSol)
	}

	return r0
}

// ReadChampion provides a mock function with given fields: filePath
func (_m *Tactics) ReadChampion(filePath string) (lol.Champion, error) {
	ret := _m.Called(filePath)

	var r0 lol.Champion
	if rf, ok := ret.Get(0).(func(string) lol.Champion); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(lol.Champion)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteChampion provides a mock function with given fields: champion, filePath
func (_m *Tactics) WriteChampion(champion lol.Champion, filePath string) error {
	ret := _m.Called(champion, filePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(lol.Champion, string) error); ok {
		r0 = rf(champion, filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTactics interface {
	mock.TestingT
	Cleanup(func())
}

// NewTactics creates a new instance of Tactics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTactics(t mockConstructorTestingTNewTactics) *Tactics {
	mock := &Tactics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
